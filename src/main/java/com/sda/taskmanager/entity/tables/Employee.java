/*
 * This file is generated by jOOQ.
 */
package com.sda.taskmanager.entity.tables;


import com.sda.taskmanager.entity.Indexes;
import com.sda.taskmanager.entity.Keys;
import com.sda.taskmanager.entity.Tasks;
import com.sda.taskmanager.entity.tables.records.EmployeeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tasks.employee</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>tasks.employee.employee_id</code>.
     */
    public final TableField<EmployeeRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('tasks.\" employee_employee_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>tasks.employee.full_name</code>.
     */
    public final TableField<EmployeeRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tasks.employee.employee_position</code>.
     */
    public final TableField<EmployeeRecord, String> EMPLOYEE_POSITION = createField(DSL.name("employee_position"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tasks.employee.company_branch</code>.
     */
    public final TableField<EmployeeRecord, String> COMPANY_BRANCH = createField(DSL.name("company_branch"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tasks.employee.manager</code>.
     */
    public final TableField<EmployeeRecord, Integer> MANAGER = createField(DSL.name("manager"), SQLDataType.INTEGER, this, "");

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tasks.employee</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>tasks.employee</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    /**
     * Create a <code>tasks.employee</code> table reference
     */
    public Employee() {
        this(DSL.name("employee"), null);
    }

    public <O extends Record> Employee(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return Tasks.TASKS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes._EMPLOYEE_EMPLOYEE_ID_UINDEX);
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys._EMPLOYEE_PK;
    }

    @Override
    public List<UniqueKey<EmployeeRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeRecord>>asList(Keys._EMPLOYEE_PK);
    }

    @Override
    public List<ForeignKey<EmployeeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeRecord, ?>>asList(Keys.EMPLOYEE__MANAGER);
    }

    public Employee employee() {
        return new Employee(this, Keys.EMPLOYEE__MANAGER);
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
