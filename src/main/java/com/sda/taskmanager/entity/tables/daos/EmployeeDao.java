/*
 * This file is generated by jOOQ.
 */
package com.sda.taskmanager.entity.tables.daos;


import com.sda.taskmanager.entity.tables.Employee;
import com.sda.taskmanager.entity.tables.records.EmployeeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeDao extends DAOImpl<EmployeeRecord, com.sda.taskmanager.entity.tables.pojos.Employee, Integer> {

    /**
     * Create a new EmployeeDao without any configuration
     */
    public EmployeeDao() {
        super(Employee.EMPLOYEE, com.sda.taskmanager.entity.tables.pojos.Employee.class);
    }

    /**
     * Create a new EmployeeDao with an attached configuration
     */
    public EmployeeDao(Configuration configuration) {
        super(Employee.EMPLOYEE, com.sda.taskmanager.entity.tables.pojos.Employee.class, configuration);
    }

    @Override
    public Integer getId(com.sda.taskmanager.entity.tables.pojos.Employee object) {
        return object.getEmployeeId();
    }

    /**
     * Fetch records that have <code>employee_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchRangeOfEmployeeId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMPLOYEE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>employee_id IN (values)</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchByEmployeeId(Integer... values) {
        return fetch(Employee.EMPLOYEE.EMPLOYEE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>employee_id = value</code>
     */
    public com.sda.taskmanager.entity.tables.pojos.Employee fetchOneByEmployeeId(Integer value) {
        return fetchOne(Employee.EMPLOYEE.EMPLOYEE_ID, value);
    }

    /**
     * Fetch records that have <code>full_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchRangeOfFullName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.FULL_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>full_name IN (values)</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchByFullName(String... values) {
        return fetch(Employee.EMPLOYEE.FULL_NAME, values);
    }

    /**
     * Fetch records that have <code>employee_position BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchRangeOfEmployeePosition(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMPLOYEE_POSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>employee_position IN (values)</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchByEmployeePosition(String... values) {
        return fetch(Employee.EMPLOYEE.EMPLOYEE_POSITION, values);
    }

    /**
     * Fetch records that have <code>company_branch BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchRangeOfCompanyBranch(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.COMPANY_BRANCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>company_branch IN (values)</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchByCompanyBranch(String... values) {
        return fetch(Employee.EMPLOYEE.COMPANY_BRANCH, values);
    }

    /**
     * Fetch records that have <code>manager BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchRangeOfManager(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.MANAGER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manager IN (values)</code>
     */
    public List<com.sda.taskmanager.entity.tables.pojos.Employee> fetchByManager(Integer... values) {
        return fetch(Employee.EMPLOYEE.MANAGER, values);
    }
}
