/*
 * This file is generated by jOOQ.
 */
package com.sda.taskmanager.entity.tables.records;


import com.sda.taskmanager.entity.tables.Task;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record4<Integer, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>tasks.task.task_id</code>.
     */
    public void setTaskId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>tasks.task.task_id</code>.
     */
    public Integer getTaskId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>tasks.task.task_description</code>.
     */
    public void setTaskDescription(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>tasks.task.task_description</code>.
     */
    public String getTaskDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>tasks.task.task_priority</code>.
     */
    public void setTaskPriority(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>tasks.task.task_priority</code>.
     */
    public Integer getTaskPriority() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>tasks.task.task_performer</code>.
     */
    public void setTaskPerformer(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>tasks.task.task_performer</code>.
     */
    public Integer getTaskPerformer() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Task.TASK.TASK_ID;
    }

    @Override
    public Field<String> field2() {
        return Task.TASK.TASK_DESCRIPTION;
    }

    @Override
    public Field<Integer> field3() {
        return Task.TASK.TASK_PRIORITY;
    }

    @Override
    public Field<Integer> field4() {
        return Task.TASK.TASK_PERFORMER;
    }

    @Override
    public Integer component1() {
        return getTaskId();
    }

    @Override
    public String component2() {
        return getTaskDescription();
    }

    @Override
    public Integer component3() {
        return getTaskPriority();
    }

    @Override
    public Integer component4() {
        return getTaskPerformer();
    }

    @Override
    public Integer value1() {
        return getTaskId();
    }

    @Override
    public String value2() {
        return getTaskDescription();
    }

    @Override
    public Integer value3() {
        return getTaskPriority();
    }

    @Override
    public Integer value4() {
        return getTaskPerformer();
    }

    @Override
    public TaskRecord value1(Integer value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskRecord value2(String value) {
        setTaskDescription(value);
        return this;
    }

    @Override
    public TaskRecord value3(Integer value) {
        setTaskPriority(value);
        return this;
    }

    @Override
    public TaskRecord value4(Integer value) {
        setTaskPerformer(value);
        return this;
    }

    @Override
    public TaskRecord values(Integer value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Integer taskId, String taskDescription, Integer taskPriority, Integer taskPerformer) {
        super(Task.TASK);

        setTaskId(taskId);
        setTaskDescription(taskDescription);
        setTaskPriority(taskPriority);
        setTaskPerformer(taskPerformer);
    }
}
